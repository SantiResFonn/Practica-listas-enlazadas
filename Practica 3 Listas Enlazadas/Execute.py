from Logic import DoubleLinkedList
from Logic import Cancion
import time
import random
import os

class Lista_Reproduccion:
    def __init__(self):
        self.lista: DoubleLinkedList = DoubleLinkedList()
        self.reproduciendo: Cancion = None
        self.shuffle_mode = False
        self.shuffled_list = []
        self.paused = False
        self.segundos_transcurridos = 0

    def insertar_cancion(self):
        try:
            titulo = input("üéµ Ingrese el t√≠tulo de la canci√≥n que desea agregar: ")
            autor = input("üë§ Ingrese el autor de la canci√≥n: ")
            duracion = int(input("‚è±Ô∏è Ingrese la duraci√≥n de la canci√≥n (10-15 seg): "))
            if not (10 <= duracion <= 15):
                print("‚ö†Ô∏è Duraci√≥n fuera del rango permitido.")
                return
        except ValueError:
            print("‚ùå Duraci√≥n inv√°lida. Intente nuevamente.")
            return
        if self.lista.search(titulo):
            print("‚ö†Ô∏è La canci√≥n ya existe en la lista.")
        else:
            self.lista.append(titulo, autor, duracion)
            print("‚úÖ Canci√≥n agregada a la lista de reproducci√≥n")

    def eliminar_cancion(self):
        titulo = input("üóëÔ∏è Ingrese el t√≠tulo de la canci√≥n que desea eliminar: ")
        if self.lista.search(titulo):
            if self.reproduciendo and self.reproduciendo.titulo == titulo:
                self.reproduciendo = self.siguiente_cancion(self.reproduciendo)
            self.lista.delete(titulo)
            print("‚úÖ Canci√≥n eliminada con √©xito")
        else:
            print("‚ùå La canci√≥n no existe en la lista")

    def siguiente_cancion(self, cancion: Cancion):
        siguiente = cancion.next
        return siguiente if siguiente else self.lista.head

    def anterior_cancion(self, cancion: Cancion):
        anterior = cancion.prev
        return anterior if anterior else self.lista.tail

    def mostrar_cancion_actual(self):
        if self.reproduciendo:
            print(f"üé∂ Reproduciendo: {self.reproduciendo.titulo} - {self.reproduciendo.autor} ({self.reproduciendo.duracion}s)")
        else:
            print("üîá No hay canci√≥n en reproducci√≥n")

    def mostrar_playlist(self):
        print("\nüìú Lista de Reproducci√≥n:")
        nodo = self.lista.head
        while nodo:
            actual = "üéß " if self.reproduciendo and self.reproduciendo.titulo == nodo.titulo else "   "
            print(f"{actual}{nodo.titulo} - {nodo.autor} ({nodo.duracion}s)")
            nodo = nodo.next

    def activar_shuffle(self):
        self.shuffle_mode = True
        self.shuffled_list = self.lista.to_list()
        random.shuffle(self.shuffled_list)
        self.reproduciendo = self.shuffled_list.pop(0) if self.shuffled_list else None
        print("üîÄ Modo aleatorio activado")

    def adelantar_durante_reproduccion(self):
        try:
            porcentaje = int(input("‚è∏Ô∏è Reproducci√≥n pausada. Ingrese el % a adelantar: "))
        except ValueError:
            print("‚ùå Porcentaje inv√°lido")
            return False

        if not self.reproduciendo:
            print("‚ùå No hay canci√≥n en reproducci√≥n")
            return False

        restante = self.reproduciendo.duracion - self.segundos_transcurridos
        adelanto = int((porcentaje / 100) * self.reproduciendo.duracion)

        print(f"‚è© Adelantando {adelanto}s...")
        if adelanto >= restante:
            print("‚è≠Ô∏è Adelanto mayor a lo restante, pasando a la siguiente canci√≥n...")
            return True
        else:
            self.segundos_transcurridos += adelanto
            return False

    def simular_reproduccion(self):
        if not self.reproduciendo:
            self.reproduciendo = self.lista.head if not self.shuffle_mode else (self.shuffled_list.pop(0) if self.shuffled_list else None)

        if not self.reproduciendo:
            print("‚ùå No hay canciones para reproducir.")
            return

        while self.reproduciendo:
            self.segundos_transcurridos = 0
            print(f"\nüéµ Reproduciendo: {self.reproduciendo.titulo} - {self.reproduciendo.autor}")
            while self.segundos_transcurridos < self.reproduciendo.duracion:
                barra = "‚ñà" * self.segundos_transcurridos + "-" * (self.reproduciendo.duracion - self.segundos_transcurridos)
                print(f"[{barra}] {self.segundos_transcurridos}/{self.reproduciendo.duracion}s", end='\r')
                time.sleep(1)
                self.segundos_transcurridos += 1

                if self.check_adelantar():
                    break

            print()  # salto de l√≠nea
            if self.shuffle_mode:
                self.reproduciendo = self.shuffled_list.pop(0) if self.shuffled_list else None
            else:
                siguiente = self.siguiente_cancion(self.reproduciendo)
                self.reproduciendo = siguiente if siguiente != self.lista.head else None

        print("\nüì≠ Fin de la lista de reproducci√≥n. Volviendo al men√∫...")

    def check_adelantar(self):
        print("\n‚èØÔ∏è Pulse 'a' para adelantar la canci√≥n o Enter para continuar...")
        opcion = input()
        if opcion.lower() == 'a':
            return self.adelantar_durante_reproduccion()
        return False

    def generar_subplaylist(self, titulos):
        sublista = Lista_Reproduccion()
        for titulo in titulos:
            cancion = self.lista.get_node(titulo)
            if cancion:
                sublista.lista.append(cancion.titulo, cancion.autor, cancion.duracion)
        print("üÜï Subplaylist creada.")
        usar = input("\u00bfDesea usar la subplaylist? (s/n): ").lower()
        if usar == 's':
            sublista.menu()

    def menu(self):
        opciones = {
            '1': self.insertar_cancion,
            '2': lambda: self.eliminar_cancion(),
            '3': lambda: self.set_reproduccion(self.siguiente_cancion(self.reproduciendo)),
            '4': lambda: self.set_reproduccion(self.anterior_cancion(self.reproduciendo)),
            '5': self.mostrar_cancion_actual,
            '6': self.mostrar_playlist,
            '7': self.activar_shuffle,
            '8': lambda: print("‚õî Esta opci√≥n ahora est√° disponible durante la reproducci√≥n. Use 'a' para adelantar."),
            '9': self.simular_reproduccion,
            '10': lambda: self.generar_subplaylist(input("Ingrese t√≠tulos separados por coma: ").split(',')),
        }
        while True:
            print("""
üéº Men√∫ Principal
------------------------
1. ‚ûï Agregar canci√≥n
2. üóëÔ∏è Eliminar canci√≥n
3. ‚è≠Ô∏è Siguiente canci√≥n
4. ‚èÆÔ∏è Canci√≥n anterior
5. üéß Mostrar canci√≥n en reproducci√≥n
6. üìÉ Mostrar playlist
7. üîÄ Activar modo aleatorio
8. ‚è© Adelantar canci√≥n (durante reproducci√≥n)
9. ‚ñ∂Ô∏è Reproducir playlist
10. üß© Generar subplaylist
0. ‚ùå Salir
""")
            op = input("Seleccione una opci√≥n: ")
            if op == '0':
                break
            accion = opciones.get(op)
            if accion:
                accion()
            else:
                print("‚ö†Ô∏è Opci√≥n inv√°lida")

    def set_reproduccion(self, cancion):
        self.reproduciendo = cancion
        self.mostrar_cancion_actual()


x = Lista_Reproduccion()

x.menu()
